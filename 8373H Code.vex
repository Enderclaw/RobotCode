#include "robot-config.h"

void pre_auton( void ) {
    
}

void rbautonomous(void){
    int DriveSpeedRPM = 100;
    int LiftSpeedRPM = 100;
    bool waitForCompletion = true;
    
    LeftDrive.spin(vex::directionType::rev, DriveSpeedRPM, vex::velocityUnits::rpm);
    RightDrive.spin(vex::directionType::rev, DriveSpeedRPM, vex::velocityUnits::rpm);
    task::sleep(2500);
    
    LeftDrive.stop(brakeType::brake);
    RightDrive.stop(brakeType::brake);
    
    //LeftDrive.spin(vex::directionType::fwd, DriveSpeedRPM, vex::velocityUnits::rpm);
    //RightDrive.spin(vex::directionType::fwd, DriveSpeedRPM, vex::velocityUnits::rpm);
    task::sleep(1000);
    
    LeftDrive.stop(brakeType::brake);
    RightDrive.stop(brakeType::brake);
    
    LeftDrive.rotateFor(720, rotationUnits::deg, DriveSpeedRPM, velocityUnits::pct, waitForCompletion);
    RightDrive.rotateFor(-720, rotationUnits::deg, DriveSpeedRPM, velocityUnits::pct, waitForCompletion);
    
    LeftDrive.stop(brakeType::brake);
    RightDrive.stop(brakeType::brake);
    
    LeftDrive.resetRotation();
    RightDrive.resetRotation();
    task::sleep(100000);
    
    
    LeftDrive.spin(vex::directionType::rev, DriveSpeedRPM, vex::velocityUnits::rpm);
    RightDrive.spin(vex::directionType::rev, DriveSpeedRPM, vex::velocityUnits::rpm);
    task::sleep(1200);
    
    LeftDrive.stop(brakeType::brake);
    RightDrive.stop(brakeType::brake);
    
    LeftLift.spin(vex::directionType::fwd, LiftSpeedRPM, vex::velocityUnits::rpm);
    RightLift.spin(vex::directionType::fwd, LiftSpeedRPM, vex::velocityUnits::rpm);
    task::sleep(500);
    
    LeftLift.stop(brakeType::brake);
    RightLift.stop(brakeType::brake);
}

void fly() {
    
}

void usercontrol( void ) {
    while (1){
        int Dir = 0;
        int LiftSpeedRPM  = 200;
        int BallSpeedPCT  = 50;  
        int FlySpeedRPM   = 400;
        int WheelSpeedPCT = 100;
        
        LeftDrive.spin(vex::directionType::rev, Controller1.Axis3.value()*WheelSpeedPCT, vex::velocityUnits::pct);
        RightDrive.spin(vex::directionType::rev, Controller1.Axis2.value()*WheelSpeedPCT, vex::velocityUnits::pct);
        
        if(Controller1.ButtonUp.pressing()) { //Ball Intake Forward
			WheelSpeedPCT = 0.75;
        }
		else if(Controller1.ButtonDown.pressing()) { //Ball Intake Backward
			WheelSpeedPCT = 0.25;
		}
		else {
		}
        
		if(Controller1.ButtonL1.pressing()) { //Lift Deploy
			LeftLift.spin(directionType::fwd, LiftSpeedRPM, velocityUnits::pct);
			RightLift.spin(directionType::fwd, LiftSpeedRPM, velocityUnits::pct);
		}
		else if(Controller1.ButtonL2.pressing()) { //Lift Retract
			LeftLift.spin(directionType::rev, LiftSpeedRPM, velocityUnits::pct);
			RightLift.spin(directionType::rev, LiftSpeedRPM, velocityUnits::pct);
		}
		else {
			LeftLift.stop(brakeType::coast);
            RightLift.stop(brakeType::coast);
		}
        
		if(Controller1.ButtonR1.pressing()) { //Flywheel Forward
			RightFly.spin(directionType::rev, FlySpeedRPM, velocityUnits::rpm);
            LeftFly.spin(directionType::rev, FlySpeedRPM, velocityUnits::rpm);
		}
		else if(Controller1.ButtonR2.pressing()) { //Flywheel Backward
			RightFly.spin(directionType::fwd, FlySpeedRPM, velocityUnits::rpm);
            LeftFly.spin(directionType::fwd, FlySpeedRPM, velocityUnits::rpm);
		}
		else {
			RightFly.stop(brakeType::coast);
            LeftFly.stop(brakeType::coast);
		}
        
		if(Controller1.ButtonX.pressing()) { //Ball Intake Forward
			BallIntake.spin(directionType::fwd, BallSpeedPCT, velocityUnits::pct);
        }
		else if(Controller1.ButtonA.pressing()) { //Ball Intake Backward
			BallIntake.spin(directionType::rev, BallSpeedPCT, velocityUnits::pct);
		}
		else {
			BallIntake.stop(brakeType::brake);
		}
    }
    vex::task::sleep(20); 
}

int main() {
    pre_auton();
    Competition.drivercontrol(usercontrol);
    Competition.autonomous(rbautonomous);
    
    /*
    int Menu = 1;
    
    Brain.Screen.setPenColor(vex::color::black);
    Brain.Screen.setFillColor(vex::color::red);
    Brain.Screen.drawRectangle(0, 0, 100, 100);
    Brain.Screen.drawRectangle(0, 140, 100, 100);
    
    Brain.Screen.setPenColor(vex::color::black);
    Brain.Screen.setFillColor(vex::color::blue);
    Brain.Screen.drawRectangle(380, 0, 100, 100);
    Brain.Screen.drawRectangle(380, 140, 100, 100);
    
    
 	while (1){
        int x = Brain.Screen.xPosition();
        int y = Brain.Screen.xPosition();
        
        if (Menu == 1) {
            if(Brain.Screen.pressing() && x >= 0 && x <= 100 && y >= 0 && y <= 100) {
                Brain.Screen.clearScreen();
                //Competition.autonomous( auton1 );
                //Menu == 2;
                
                Brain.Screen.setPenColor(vex::color::black);
                Brain.Screen.setFillColor(vex::color::white);
                Brain.Screen.drawRectangle(0, 0, 100, 100);
            }
            else if(Brain.Screen.pressing() && x >= 0 && x <= 100 && y >= 140 && y <= 240) {
                Brain.Screen.clearScreen();
                //Competition.autonomous( auton2 );
                //Menu == 2;
                
                Brain.Screen.setPenColor(vex::color::black);
                Brain.Screen.setFillColor(vex::color::white);
                Brain.Screen.drawRectangle(0, 140, 100, 100);
            }
            
            else if(Brain.Screen.pressing() && x >= 380 && x <= 480 && y >= 0 && y <= 100) {
                Brain.Screen.clearScreen();
                //Competition.autonomous( auton2 );
                //Menu == 2;
            }
            else if(Brain.Screen.pressing() && x >= 380 && x <= 480 && y >= 140 && y <= 240) {
                Brain.Screen.clearScreen();
                //Competition.autonomous( auton2 );
                //Menu == 2;
            }
            else {}
            
        }
        
        vex::task::sleep(100);
 	}
    */
 }
