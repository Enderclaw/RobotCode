#include "robot-config.h"
void pre_auton( void ) {
 
}

void auton1( void ) {
    while (1) {
        int LiftSpeedPCT = 100;
        int FlySpeedPCT = 200;
        
        LeftDrive.spin(directionType::fwd, LiftSpeedPCT, velocityUnits::pct);
        RightDrive.spin(directionType::fwd, LiftSpeedPCT, velocityUnits::pct);
        vex::task::sleep(200);
        
        BallIntake.spin(directionType::fwd, LiftSpeedPCT, velocityUnits::pct);
        FlyWheel.spin(directionType::fwd, FlySpeedPCT, velocityUnits::pct);
        vex::task::sleep(200);
        
        LeftDrive.spin(directionType::fwd, LiftSpeedPCT, velocityUnits::pct);
        RightDrive.spin(directionType::rev, LiftSpeedPCT, velocityUnits::pct);
        vex::task::sleep(200);
        
        LeftLift.spin(directionType::fwd, LiftSpeedPCT, velocityUnits::pct);
        RightLift.spin(directionType::fwd, LiftSpeedPCT, velocityUnits::pct);
        vex::task::sleep(200);
        }
}

void auton2( void ){
    while (1) {
        int LiftSpeedPCT = 100;
        int FlySpeedPCT = 200;
        
        BallIntake.spin(directionType::fwd, LiftSpeedPCT, velocityUnits::pct);
        FlyWheel.spin(directionType::fwd, FlySpeedPCT, velocityUnits::pct);
        vex::task::sleep(200);
        }
}
void usercontrol( void ) {
    while (1){
        int LiftSpeedPCT = 100;
        int CapSpeedPCT = 50;
        int FlySpeedPCT = 200;
        
        LeftDrive.spin(directionType::fwd, Controller1.Axis3.value(), velocityUnits::pct);
        RightDrive.spin(directionType::fwd, Controller1.Axis2.value(), velocityUnits::pct);
        vex::task::sleep(200);
  
		if(Controller1.ButtonL1.pressing()) { //Lift Deploy
			LeftLift.spin(directionType::fwd, LiftSpeedPCT, velocityUnits::pct);
			RightLift.spin(directionType::fwd, LiftSpeedPCT, velocityUnits::pct);
		}
		else if(Controller1.ButtonL2.pressing()) { //Lift Retract
			LeftLift.spin(directionType::rev, LiftSpeedPCT, velocityUnits::pct);
			RightLift.spin(directionType::rev, LiftSpeedPCT, velocityUnits::pct);
		}
		else {
			LeftLift.stop(brakeType::brake);
			RightLift.stop(brakeType::brake);
		}
		

		if(Controller1.ButtonR1.pressing()) { //Cap Forward
			CapFlip.spin(directionType::fwd, CapSpeedPCT, velocityUnits::pct);
		}
		else if(Controller1.ButtonR2.pressing()) { //Cap Backward
			CapFlip.spin(directionType::rev, CapSpeedPCT, velocityUnits::pct);
		}
		else {
			CapFlip.stop(brakeType::brake);
		}
        
        
		if(Controller1.ButtonA.pressing()) { //Elevate Puncher
			FlyWheel.spin(directionType::fwd, FlySpeedPCT, velocityUnits::pct);

		}
		else if(Controller1.ButtonY.pressing()) { //Depress Puncher
			FlyWheel.spin(directionType::rev, FlySpeedPCT, velocityUnits::pct);
			
		}
		else {
			FlyWheel.stop(brakeType::brake);
		}
      
		if(Controller1.ButtonUp.pressing()) { //Ball Intake Forward
			BallIntake.spin(directionType::fwd, CapSpeedPCT, velocityUnits::pct);
        }
        
		else if(Controller1.ButtonDown.pressing()) { //Ball Intake Backward
			BallIntake.spin(directionType::rev, CapSpeedPCT, velocityUnits::pct);
		}
       
		else {
			BallIntake.stop(brakeType::brake);
		}
        vex::task::sleep(200);
    }
    vex::task::sleep(20);
}

int main() { 
    pre_auton();
    Competition.autonomous( autonomous );
    Competition.drivercontrol( usercontrol );
    while (1) {
        vex::task::sleep(100);
    }
 }
