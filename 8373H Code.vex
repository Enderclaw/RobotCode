#include "robot-config.h"

void pre_auton( void ) {
    
}

void redback( void ) {
    while (1) {
        int LiftSpeedPCT = 50;
        int WheelSpeedPCT = 50;
        int FlySpeedPCT = 200;
        
        LeftDrive.spin(directionType::fwd, WheelSpeedPCT, velocityUnits::pct);
        RightDrive.spin(directionType::fwd, WheelSpeedPCT, velocityUnits::pct);
        vex::task::sleep(1000);
        LeftDrive.stop();
        RightDrive.stop();
        
        LeftDrive.spin(directionType::rev, WheelSpeedPCT, velocityUnits::pct);
        RightDrive.spin(directionType::fwd, WheelSpeedPCT, velocityUnits::pct);
        vex::task::sleep(1000);
        LeftDrive.stop();
        RightDrive.stop();
        
        LeftLift.spin(directionType::fwd, LiftSpeedPCT, velocityUnits::pct);
        RightLift.spin(directionType::fwd, LiftSpeedPCT, velocityUnits::pct);
        vex::task::sleep(2000);
        RightLift.stop();
        LeftLift.stop();
        
        FlyWheel.spin(directionType::rev, FlySpeedPCT, velocityUnits::pct);
        vex::task::sleep(3000);
        BallIntake.spin(directionType::rev, LiftSpeedPCT, velocityUnits::pct);
        vex::task::sleep(1000);
        BallIntake.stop();
        FlyWheel.stop();
        
        LeftLift.spin(directionType::rev, LiftSpeedPCT, velocityUnits::pct);
        RightLift.spin(directionType::rev, LiftSpeedPCT, velocityUnits::pct);
        vex::task::sleep(2000);
        RightLift.stop();
        LeftLift.stop();
        
        LeftDrive.spin(directionType::rev, WheelSpeedPCT, velocityUnits::pct);
        RightDrive.spin(directionType::rev, WheelSpeedPCT, velocityUnits::pct);
        vex::task::sleep(1000);
        LeftDrive.stop();
        RightDrive.stop();
        
        LeftDrive.spin(directionType::fwd, WheelSpeedPCT, velocityUnits::pct);
        RightDrive.spin(directionType::rev, WheelSpeedPCT, velocityUnits::pct);
        vex::task::sleep(1000);
        LeftDrive.stop();
        RightDrive.stop();
        vex::task::sleep(2000);
    }
}

void blueback( void ) {
    while (1) {
        int LiftSpeedPCT = 50;
        int WheelSpeedPCT = 50;
        int FlySpeedPCT = 200;
        
        LeftDrive.spin(directionType::fwd, WheelSpeedPCT, velocityUnits::pct);
        RightDrive.spin(directionType::fwd, WheelSpeedPCT, velocityUnits::pct);
        vex::task::sleep(1000);
        LeftDrive.stop();
        RightDrive.stop();
        
        LeftDrive.spin(directionType::fwd, WheelSpeedPCT, velocityUnits::pct);
        RightDrive.spin(directionType::rev, WheelSpeedPCT, velocityUnits::pct);
        vex::task::sleep(1000);
        LeftDrive.stop();
        RightDrive.stop();
        
        LeftLift.spin(directionType::fwd, LiftSpeedPCT, velocityUnits::pct);
        RightLift.spin(directionType::fwd, LiftSpeedPCT, velocityUnits::pct);
        vex::task::sleep(2000);
        RightLift.stop();
        LeftLift.stop();
        
        FlyWheel.spin(directionType::rev, FlySpeedPCT, velocityUnits::pct);
        vex::task::sleep(3000);
        BallIntake.spin(directionType::rev, LiftSpeedPCT, velocityUnits::pct);
        vex::task::sleep(1000);
        BallIntake.stop();
        FlyWheel.stop();
        
        LeftLift.spin(directionType::rev, LiftSpeedPCT, velocityUnits::pct);
        RightLift.spin(directionType::rev, LiftSpeedPCT, velocityUnits::pct);
        vex::task::sleep(2000);
        RightLift.stop();
        LeftLift.stop();
        
        LeftDrive.spin(directionType::rev, WheelSpeedPCT, velocityUnits::pct);
        RightDrive.spin(directionType::rev, WheelSpeedPCT, velocityUnits::pct);
        vex::task::sleep(1000);
        LeftDrive.stop();
        RightDrive.stop();
        
        LeftDrive.spin(directionType::rev, WheelSpeedPCT, velocityUnits::pct);
        RightDrive.spin(directionType::fwd, WheelSpeedPCT, velocityUnits::pct);
        vex::task::sleep(1000);
        LeftDrive.stop();
        RightDrive.stop();
        vex::task::sleep(2000);
    }
}

void usercontrol( void ) {
    while (1){
        int LiftSpeedPCT = 50;
        int CapSpeedPCT = 25;  
        int FlySpeedPCT = 200;
        int WheelSpeedPCT = 100;

        LeftDrive.spin(vex::directionType::fwd, Controller1.Axis3.value(), vex::velocityUnits::pct);
        RightDrive.spin(vex::directionType::fwd, Controller1.Axis2.value(), vex::velocityUnits::pct);

		if(Controller1.ButtonL1.pressing()) { //Lift Deploy
			LeftLift.spin(directionType::fwd, LiftSpeedPCT, velocityUnits::pct);
			RightLift.spin(directionType::fwd, LiftSpeedPCT, velocityUnits::pct);
		}
		else if(Controller1.ButtonL2.pressing()) { //Lift Retract
			LeftLift.spin(directionType::rev, LiftSpeedPCT, velocityUnits::pct);
			RightLift.spin(directionType::rev, LiftSpeedPCT, velocityUnits::pct);
		}
		else {
			LeftLift.stop(brakeType::brake);
			RightLift.stop(brakeType::brake);
		}
        
		if(Controller1.ButtonR1.pressing()) { //Cap Forward
			CapFlip.spin(directionType::fwd, CapSpeedPCT, velocityUnits::pct);
		}
		else if(Controller1.ButtonR2.pressing()) { //Cap Backward
			CapFlip.spin(directionType::rev, CapSpeedPCT, velocityUnits::pct);
		}
		else {
			CapFlip.stop(brakeType::brake);
		}
        
        
		if(Controller1.ButtonA.pressing()) { //Flywheel Forward
			FlyWheel.spin(directionType::fwd, FlySpeedPCT, velocityUnits::pct);
		}
		else if(Controller1.ButtonY.pressing()) { //Flywheel Backward
			FlyWheel.spin(directionType::rev, FlySpeedPCT, velocityUnits::pct);
			
		}
		else {
			FlyWheel.stop(brakeType::brake);
		}
        
		if(Controller1.ButtonUp.pressing()) { //Ball Intake Forward
			BallIntake.spin(directionType::fwd, CapSpeedPCT, velocityUnits::pct);
            
        }
        
		else if(Controller1.ButtonDown.pressing()) { //Ball Intake Backward
			BallIntake.spin(directionType::rev, CapSpeedPCT, velocityUnits::pct);
		}
       
		else {
			BallIntake.stop(brakeType::brake);
		}
    }
    vex::task::sleep(20); 
}

int main() {
    pre_auton();
    Competition.drivercontrol(usercontrol);
    Competition.autonomous(pre_auton);
    
    /*
    int Menu = 1;
    
    Brain.Screen.setPenColor(vex::color::black);
    Brain.Screen.setFillColor(vex::color::red);
    Brain.Screen.drawRectangle(0, 0, 100, 100);
    Brain.Screen.drawRectangle(0, 140, 100, 100);
    
    Brain.Screen.setPenColor(vex::color::black);
    Brain.Screen.setFillColor(vex::color::blue);
    Brain.Screen.drawRectangle(380, 0, 100, 100);
    Brain.Screen.drawRectangle(380, 140, 100, 100);
    
    
 	while (1){
        int x = Brain.Screen.xPosition();
        int y = Brain.Screen.xPosition();
        
        if (Menu == 1) {
            if(Brain.Screen.pressing() && x >= 0 && x <= 100 && y >= 0 && y <= 100) {
                Brain.Screen.clearScreen();
                //Competition.autonomous( auton1 );
                //Menu == 2;
                
                Brain.Screen.setPenColor(vex::color::black);
                Brain.Screen.setFillColor(vex::color::white);
                Brain.Screen.drawRectangle(0, 0, 100, 100);
            }
            else if(Brain.Screen.pressing() && x >= 0 && x <= 100 && y >= 140 && y <= 240) {
                Brain.Screen.clearScreen();
                //Competition.autonomous( auton2 );
                //Menu == 2;
                
                Brain.Screen.setPenColor(vex::color::black);
                Brain.Screen.setFillColor(vex::color::white);
                Brain.Screen.drawRectangle(0, 140, 100, 100);
            }
            
            else if(Brain.Screen.pressing() && x >= 380 && x <= 480 && y >= 0 && y <= 100) {
                Brain.Screen.clearScreen();
                //Competition.autonomous( auton2 );
                //Menu == 2;
            }
            else if(Brain.Screen.pressing() && x >= 380 && x <= 480 && y >= 140 && y <= 240) {
                Brain.Screen.clearScreen();
                //Competition.autonomous( auton2 );
                //Menu == 2;
            }
            else {}
            
        }
        
        vex::task::sleep(100);
 	}
    */
 }
