#include "robot-config.h"

void pre_auton( void ) {
    LeftDrive.resetRotation();
    RightDrive.resetRotation();

}
void autonomousBack( void ){
    while (1){
    int DriveSpeedPCT = 100;
    bool waitForCompletion = true;
    LeftDrive.rotateFor(1440, rotationUnits::deg, DriveSpeedPCT, velocityUnits::pct, waitForCompletion);
    RightDrive.rotateFor(1440, rotationUnits::deg, DriveSpeedPCT, velocityUnits::pct, waitForCompletion);
    
    LeftDrive.stop(brakeType::brake);
    RightDrive.stop(brakeType::brake);
    
    LeftDrive.resetRotation();
    RightDrive.resetRotation();
    
    LeftDrive.rotateFor(1080, rotationUnits::deg, DriveSpeedPCT, velocityUnits::pct, waitForCompletion);
    RightDrive.rotateFor(-1080, rotationUnits::deg, DriveSpeedPCT, velocityUnits::pct, waitForCompletion);
    
    LeftDrive.stop(brakeType::brake);
    RightDrive.stop(brakeType::brake);
    
    LeftDrive.resetRotation();
    RightDrive.resetRotation();
    
    vex::task::sleep(200);
    }
}

void autonomousFront(void){
    while(1){
        int FlySpeedPCT = 200;
        int DriveSpeedPCT = 100;
        bool waitForCompletion = true;
        
        RightDrive.rotateFor(720, rotationUnits::deg, DriveSpeedPCT, velocityUnits::pct, waitForCompletion);
        LeftDrive.rotateFor(720, rotationUnits::deg, DriveSpeedPCT, velocityUnits::pct, waitForCompletion);
        
        LeftDrive.stop(brakeType::brake);
        RightDrive.stop(brakeType::brake);
        
        RightFly.spin(directionType::fwd, FlySpeedPCT, velocityUnits::pct);
        LeftFly.spin(directionType::fwd, FlySpeedPCT, velocityUnits::pct);
    
        BallIntake.spin(directionType::fwd, DriveSpeedPCT, velocityUnits::pct);
            
        LeftFly.stop(brakeType::coast);
        RightFly.stop(brakeType::coast);
        BallIntake.stop(brakeType::brake);
        
        vex::task::sleep(200);
        
    }
}

void usercontrol( void ) {
    while (1){
        int Spd = 1;
        int LiftSpeedPCT  = 100;
        int BallSpeedPCT  = 50;  
        int FlySpeedPCT   = 200;
        
        /*if (Controller1.ButtonUp.pressing()) {
            Spd = 1;
        }
        else {
            Spd = 1;
        }
        
        if (Controller1.ButtonDown.pressing()) {
            Spd = 0;
        }
        else{
            Spd = 1;
        }
        */
        if (Spd == 1) {
            LeftDrive.spin(vex::directionType::rev, Controller1.Axis3.value(), vex::velocityUnits::pct);
            RightDrive.spin(vex::directionType::rev, Controller1.Axis2.value(), vex::velocityUnits::pct);
        }
        
        else {
            LeftDrive.spin(vex::directionType::rev, Controller1.Axis3.value()/2, vex::velocityUnits::pct);
            RightDrive.spin(vex::directionType::rev, Controller1.Axis2.value()/2, vex::velocityUnits::pct);
        }
        
		if(Controller1.ButtonL1.pressing()) { //Lift Deploy
			LeftLift.spin(directionType::fwd, LiftSpeedPCT, velocityUnits::pct);
			RightLift.spin(directionType::fwd, LiftSpeedPCT, velocityUnits::pct);
		}
		else if(Controller1.ButtonL2.pressing()) { //Lift Retract
			LeftLift.spin(directionType::rev, LiftSpeedPCT, velocityUnits::pct);
			RightLift.spin(directionType::rev, LiftSpeedPCT, velocityUnits::pct);
		}
		else {
			LeftLift.stop(brakeType::brake);
			RightLift.stop(brakeType::brake);
		}
        
		if(Controller1.ButtonR1.pressing()) { //Flywheel Forward
			RightFly.spin(directionType::rev, FlySpeedPCT, velocityUnits::pct);
            LeftFly.spin(directionType::rev, FlySpeedPCT, velocityUnits::pct);
		}
		else if(Controller1.ButtonR2.pressing()) { //Flywheel Backward
			RightFly.spin(directionType::fwd, FlySpeedPCT, velocityUnits::pct);
            LeftFly.spin(directionType::fwd, FlySpeedPCT, velocityUnits::pct);
		}
		else {
			RightFly.stop(brakeType::brake);
            LeftFly.stop(brakeType::brake);
		}
        
		if(Controller1.ButtonX.pressing()) { //Ball Intake Forward
			BallIntake.spin(directionType::rev, BallSpeedPCT, velocityUnits::pct);
            
        }
		else if(Controller1.ButtonA.pressing()) { //Ball Intake Backward
			BallIntake.spin(directionType::fwd, BallSpeedPCT, velocityUnits::pct);
		}
		else {
			BallIntake.stop(brakeType::brake);
		}
        
        vex::task::sleep(200);
    }
}

int main() {
    pre_auton();
    Competition.drivercontrol(usercontrol);
    Competition.autonomous(autonomousBack);
    
    /*
    int Menu = 1;
    
    Brain.Screen.setPenColor(vex::color::black);
    Brain.Screen.setFillColor(vex::color::red);
    Brain.Screen.drawRectangle(0, 0, 100, 100);
    Brain.Screen.drawRectangle(0, 140, 100, 100);
    
    Brain.Screen.setPenColor(vex::color::black);
    Brain.Screen.setFillColor(vex::color::blue);
    Brain.Screen.drawRectangle(380, 0, 100, 100);
    Brain.Screen.drawRectangle(380, 140, 100, 100);
    
    
 	while (1){
        int x = Brain.Screen.xPosition();
        int y = Brain.Screen.xPosition();
        
        if (Menu == 1) {
            if(Brain.Screen.pressing() && x >= 0 && x <= 100 && y >= 0 && y <= 100) {
                Brain.Screen.clearScreen();
                //Competition.autonomous( auton1 );
                //Menu == 2;
                
                Brain.Screen.setPenColor(vex::color::black);
                Brain.Screen.setFillColor(vex::color::white);
                Brain.Screen.drawRectangle(0, 0, 100, 100);
            }
            else if(Brain.Screen.pressing() && x >= 0 && x <= 100 && y >= 140 && y <= 240) {
                Brain.Screen.clearScreen();
                //Competition.autonomous( auton2 );
                //Menu == 2;
                
                Brain.Screen.setPenColor(vex::color::black);
                Brain.Screen.setFillColor(vex::color::white);
                Brain.Screen.drawRectangle(0, 140, 100, 100);
            }
            
            else if(Brain.Screen.pressing() && x >= 380 && x <= 480 && y >= 0 && y <= 100) {
                Brain.Screen.clearScreen();
                //Competition.autonomous( auton2 );
                //Menu == 2;
            }
            else if(Brain.Screen.pressing() && x >= 380 && x <= 480 && y >= 140 && y <= 240) {
                Brain.Screen.clearScreen();
                //Competition.autonomous( auton2 );
                //Menu == 2;
            }
            else {}
            
        }
        
        vex::task::sleep(100);
 	}
    */
 }
