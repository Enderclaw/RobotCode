#include "robot-config.h"

void pre_auton( void ) {
    
}

void rbautonomous(void) {    // Function declaring out Right-Back Autonomous
    int DriveSpeedRPM = 100; //Integer initialization for our Autonomous
    //int LiftSpeedRPM = 100;  //Integer initialization for our Autonomous
    bool waitForCompletion = true;
    
    LeftDrive.spin(vex::directionType::rev, DriveSpeedRPM, vex::velocityUnits::rpm);
    RightDrive.spin(vex::directionType::rev, DriveSpeedRPM, vex::velocityUnits::rpm);
    task::sleep(2500);
    // This code makes both the right and left side of our drive train go at 100 RPM for 2.5 seconds
    
    LeftDrive.stop(brakeType::brake);
    RightDrive.stop(brakeType::brake);
    // This code stops all movement in the drive train
    
    LeftDrive.rotateFor(720, rotationUnits::deg, DriveSpeedRPM, velocityUnits::pct, waitForCompletion);
    RightDrive.rotateFor(-720, rotationUnits::deg, DriveSpeedRPM, velocityUnits::pct, waitForCompletion);
    //This code rotates the drive train 720 degrees to the left, giving a full 180 degree rotation.
    
    LeftDrive.stop(brakeType::brake);
    RightDrive.stop(brakeType::brake);
    //This code stops the drive train after the rotation
    
    LeftDrive.resetRotation();
    RightDrive.resetRotation();
    //This code resets the rotation counter in the Motor's built in Quadrature encoder.
}

void lbautonomous(void) {    // Function declaring out Left-Back Autonomous
    int DriveSpeedRPM = 100; //Integer initialization for our Autonomous
    //int LiftSpeedRPM = 100;  //Integer initialization for our Autonomous
    bool waitForCompletion = true;
    
    LeftDrive.spin(vex::directionType::rev, DriveSpeedRPM, vex::velocityUnits::rpm);
    RightDrive.spin(vex::directionType::rev, DriveSpeedRPM, vex::velocityUnits::rpm);
    task::sleep(2500);
    // This code makes both the right and left side of our drive train go at 100 RPM for 2.5 seconds
    
    LeftDrive.stop(brakeType::brake);
    RightDrive.stop(brakeType::brake);
    // This code stops all movement in the drive train
    
    LeftDrive.rotateFor(720, rotationUnits::deg, DriveSpeedRPM, velocityUnits::pct, waitForCompletion);
    RightDrive.rotateFor(-720, rotationUnits::deg, DriveSpeedRPM, velocityUnits::pct, waitForCompletion);
    //This code rotates the drive train 720 degrees to the right, giving a full 180 degree rotation.
    
    LeftDrive.stop(brakeType::brake);
    RightDrive.stop(brakeType::brake);
    //This code stops the drive train after the rotation
    
    LeftDrive.resetRotation();
    RightDrive.resetRotation();
    //This code resets the rotation counter in the Motor's built in Quadrature encoder.
}

void PSkills() {
    int DriveSpeedRPM = 100;
    int FlySpeedRPM = 200;
    int IntakeSpeedRPM = 100;
    int LiftSpeedRPM = 100;
    bool waitForCompletion = true;
    
    FlyWheelRight.spin(directionType::rev, FlySpeedRPM, velocityUnits::rpm);
    FlyWheelLeft.spin(directionType::rev, FlySpeedRPM, velocityUnits::rpm);
    task::sleep(3000);
    
    BallIntake.spin(vex::directionType::rev, IntakeSpeedRPM, vex::velocityUnits::rpm);
    task::sleep(2000);
    
    RightLift.spin(vex::directionType::fwd, LiftSpeedRPM, vex::velocityUnits::rpm);
    LeftLift.spin(vex::directionType::fwd, LiftSpeedRPM, vex::velocityUnits::rpm);
    task::sleep(700);
    
    RightLift.stop(brakeType::brake);
    LeftLift.stop(brakeType::brake);
    
    BallIntake.stop(brakeType::brake);
    FlyWheelRight.stop(brakeType::coast);
    FlyWheelLeft.stop(brakeType::coast);
    
    LeftDrive.spin(vex::directionType::fwd, DriveSpeedRPM, vex::velocityUnits::rpm);
    RightDrive.spin(vex::directionType::fwd, DriveSpeedRPM, vex::velocityUnits::rpm);
    task::sleep(2700);
    // This code makes both the right and left side of our drive train go at 100 RPM for 2.5 seconds
    
    //SPIN+BACK
    
    RightLift.spin(vex::directionType::rev, LiftSpeedRPM, vex::velocityUnits::rpm);
    LeftLift.spin(vex::directionType::rev, LiftSpeedRPM, vex::velocityUnits::rpm);
    task::sleep(1000);
    
    RightLift.stop(brakeType::brake);
    LeftLift.stop(brakeType::brake);
    
    LeftDrive.stop(brakeType::brake);
    RightDrive.stop(brakeType::brake);
    
    LeftDrive.spin(vex::directionType::rev, DriveSpeedRPM, vex::velocityUnits::rpm);
    RightDrive.spin(vex::directionType::rev, DriveSpeedRPM, vex::velocityUnits::rpm);
    task::sleep(2500);
    // This code makes both the right and left side of our drive train go at 100 RPM for 2.5 seconds
    
    LeftDrive.stop(brakeType::brake);
    RightDrive.stop(brakeType::brake);
    
    LeftDrive.rotateFor(460, rotationUnits::deg, DriveSpeedRPM, velocityUnits::pct, waitForCompletion);
    RightDrive.rotateFor(-460, rotationUnits::deg, DriveSpeedRPM, velocityUnits::pct, waitForCompletion);
    //This code rotates the drive train 720 degrees to the left, giving a full 180 degree rotation.
    
    LeftDrive.stop(brakeType::brake);
    RightDrive.stop(brakeType::brake);
    //This code stops the drive train after the rotation
    
    LeftDrive.resetRotation();
    RightDrive.resetRotation();
    //This code resets the rotation counter in the Motor's built in Quadrature encoder.
    
    LeftDrive.spin(vex::directionType::rev, DriveSpeedRPM, vex::velocityUnits::rpm);
    RightDrive.spin(vex::directionType::rev, DriveSpeedRPM, vex::velocityUnits::rpm);
    task::sleep(1750);
    // This code makes both the right and left side of our drive train go at 100 RPM for 2.5 seconds
    
    LeftDrive.stop(brakeType::brake);
    RightDrive.stop(brakeType::brake);
    // This code stops all movement in the drive train
    
    RightLift.spin(vex::directionType::fwd, LiftSpeedRPM, vex::velocityUnits::rpm);
    LeftLift.spin(vex::directionType::fwd, LiftSpeedRPM, vex::velocityUnits::rpm);
    task::sleep(600);
    
    RightLift.stop(brakeType::brake);
    LeftLift.stop(brakeType::brake);
    
    LeftDrive.rotateFor(-360, rotationUnits::deg, DriveSpeedRPM, velocityUnits::pct, waitForCompletion);
    RightDrive.rotateFor(360, rotationUnits::deg, DriveSpeedRPM, velocityUnits::pct, waitForCompletion);
    //This code rotates the drive train 720 degrees to the left, giving a full 180 degree rotation.
    
    LeftDrive.stop(brakeType::brake);
    RightDrive.stop(brakeType::brake);
    //This code stops the drive train after the rotation
    
    LeftDrive.resetRotation();
    RightDrive.resetRotation();
    //This code resets the rotation counter in the Motor's built in Quadrature encoder.
}

void fly() {
    //Unused function currently
}

void test() {
    // Adapting into our full Skills and front autonomous
    
    LeftDrive.spin(vex::directionType::fwd, 100, vex::velocityUnits::rpm);
    RightDrive.spin(vex::directionType::fwd, 100, vex::velocityUnits::rpm);
    BallIntake.spin(vex::directionType::rev, 150, vex::velocityUnits::rpm);
    task::sleep(2500);
    // turns on the drive train and the intake for 2.5 seconds
    
    LeftDrive.stop(vex::brakeType::brake);
    RightDrive.stop(vex::brakeType::brake);
    task::sleep(1000);
    //Stops the drive train
    
    BallIntake.spin(vex::directionType::fwd, 150, vex::velocityUnits::rpm);
    FlyWheelRight.spin(vex::directionType::fwd, 150, vex::velocityUnits::rpm);
    FlyWheelLeft.spin(vex::directionType::fwd, 150, vex::velocityUnits::rpm);
    task::sleep(500);
    // This code is used to force balls down the intake system, as they get pushed up durin the beinning
    
    BallIntake.stop(vex::brakeType::brake);
    FlyWheelRight.stop(vex::brakeType::brake);
    FlyWheelLeft.stop(vex::brakeType::brake);
    // This code stops the force down 0.5 seconds later.
    
    LeftDrive.spin(vex::directionType::rev, 50, vex::velocityUnits::rpm);
    RightDrive.spin(vex::directionType::rev, 50, vex::velocityUnits::rpm);
    task::sleep(2500);
    // This code drives the robot back for 2.5 seconds to return the robot to the start.
    
    LeftDrive.stop(vex::brakeType::brake);
    RightDrive.stop(vex::brakeType::brake);
    // This code stops the robot from driving into the wall.
    
    LeftDrive.rotateFor(-360, rotationUnits::deg, DriveSpeedRPM, velocityUnits::pct, waitForCompletion);
    RightDrive.rotateFor(360, rotationUnits::deg, DriveSpeedRPM, velocityUnits::pct, waitForCompletion);
    //This code rotates the drive train 720 degrees to the left, giving a full 180 degree rotation.
    
    LeftDrive.stop(brakeType::brake);
    RightDrive.stop(brakeType::brake);
    //This code stops the drive train after the rotation
    
    LeftDrive.resetRotation();
    RightDrive.resetRotation();
    //This code resets the rotation counter in the Motor's built in Quadrature encoder.
    
    LeftDrive.spin(vex::directionType::fwd, 100, vex::velocityUnits::rpm);
    RightDrive.spin(vex::directionType::fwd, 100, vex::velocityUnits::rpm);
    FlyWheelRight.spin(vex::directionType::rev, 150, vex::velocityUnits::rpm);
    FlyWheelLeft.spin(vex::directionType::rev, 150, vex::velocityUnits::rpm);
    vex::task::sleep(500);
    // This code toggles the Drive train and the Flywheel for 500 seconds
    
    LeftDrive.stop(vex::brakeType::brake);
    RightDrive.stop(vex::brakeType::brake);
    vex::task::sleep(1000);
    // Halts all drive movement and waits 1 second.
    
    BallIntake.spin(vex::directionType::fwd, 150, vex::velocityUnits::rpm);
    vex::task::sleep(250);
    // Not finished, but will be updated in the next pages.
    
    BallIntake.stop(vex::brakeType::brake);
    vex::task::sleep(500);
    // Stops the intake from pushing the second ball out
    
    LeftDrive.spin(vex::directionType::rev, 100, vex::velocityUnits::rpm);
    RightDrive.spin(vex::directionType::rev, 100, vex::velocityUnits::rpm);
    vex::task::sleep(2000);
    // This code toggles the Drive train and moves it right up to the flags.
    
    LeftDrive.stop(vex::brakeType::brake);
    RightDrive.stop(vex::brakeType::brake);  
    BallIntake.spin(vex::directionType::fwd, 150, vex::velocityUnits::rpm);
    vex::task::sleep(500);
    // Not finished, but will be updated in the next pages.
    
    BallIntake.stop(vex::brakeType::brake);
    FlyWheelRight.stop(vex::brakeType::brake);
    FlyWheelLeft.stop(vex::brakeType::brake);
    vex::task::sleep(500);
    // Stops the flywheel and Ball Intake
    
    LeftDrive.spin(vex::directionType::rev, 100, vex::velocityUnits::rpm);
    RightDrive.spin(vex::directionType::rev, 100, vex::velocityUnits::rpm);
    vex::task::sleep(1000);
    // This code toggles the Drive train and moves it right up to the flags.
    
    LeftDrive.spin(vex::directionType::fwd, 100, vex::velocityUnits::rpm);
    RightDrive.spin(vex::directionType::fwd, 100, vex::velocityUnits::rpm);
    vex::task::sleep(2500);
    // Moves the robot past the start point
    
    LeftDrive.stop(vex::brakeType::brake);
    RightDrive.stop(vex::brakeType::brake);
    vex::task::sleep(10);
    
    LeftDrive.rotateFor(720, rotationUnits::deg, DriveSpeedRPM, velocityUnits::pct, waitForCompletion);
    RightDrive.rotateFor(-720, rotationUnits::deg, DriveSpeedRPM, velocityUnits::pct, waitForCompletion);
    //This code rotates the drive train 720 degrees to the right, giving a full 180 degree rotation.
    
    LeftDrive.stop(brakeType::brake);
    RightDrive.stop(brakeType::brake);
    //This code stops the drive train after the rotation
    
    LeftDrive.resetRotation();
    RightDrive.resetRotation();
    //This code resets the rotation counter in the Motor's built in Quadrature encoder.
    
    // Not finished, but will be updated in the next pages.
}

void usercontrol( void ) {
    while (1) { //This line tells all code written between the {} to execute every clock cycle.
        //int Dir = 0;
        int LiftSpeedRPM  = 200;
        int BallSpeedPCT  = 50;  
        int FlySpeedRPM   = 400;
        int WheelSpeedPCT = 100;
        //Variable initialization for motor speeds
        
        LeftDrive.spin(vex::directionType::rev, Controller1.Axis3.value()*WheelSpeedPCT, vex::velocityUnits::pct);
        RightDrive.spin(vex::directionType::rev, Controller1.Axis2.value()*WheelSpeedPCT, vex::velocityUnits::pct);
        //Allows the 2 joysticks to control the left and right drive motors.
        
		if(Controller1.ButtonL1.pressing()) { //Lift Deploy
			LeftLift.spin(directionType::fwd, LiftSpeedRPM, velocityUnits::rpm);
			RightLift.spin(directionType::fwd, LiftSpeedRPM, velocityUnits::rpm);
		}
		else if(Controller1.ButtonL2.pressing()) { //Lift Retract
			LeftLift.spin(directionType::rev, LiftSpeedRPM, velocityUnits::pct);
			RightLift.spin(directionType::rev, LiftSpeedRPM, velocityUnits::pct);
		}
		else {
			LeftLift.stop(brakeType::coast);
            RightLift.stop(brakeType::coast);
		}
        //The past 10 lines of code allow for the left side top and bottom controller bumpers to control the Lift
        
		if(Controller1.ButtonR1.pressing()) { //Flywheel Forward
			FlyWheelRight.spin(directionType::rev, FlySpeedRPM, velocityUnits::rpm);
            FlyWheelLeft.spin(directionType::rev, FlySpeedRPM, velocityUnits::rpm);
		}
		else if(Controller1.ButtonR2.pressing()) { //Flywheel Backward
			FlyWheelRight.spin(directionType::fwd, FlySpeedRPM, velocityUnits::rpm);
            FlyWheelLeft.spin(directionType::fwd, FlySpeedRPM, velocityUnits::rpm);
		}
		else {
			FlyWheelRight.stop(brakeType::coast);
            FlyWheelLeft.stop(brakeType::coast);
		}
        //The past 12 lines of code allow for the right top and bottom controller bumpers to control the Flywheel
        
		if(Controller1.ButtonX.pressing()) { //Ball Intake Forward
			BallIntake.spin(directionType::fwd, BallSpeedPCT, velocityUnits::pct);
        }
		else if(Controller1.ButtonA.pressing()) { //Ball Intake Backward
			BallIntake.spin(directionType::rev, BallSpeedPCT, velocityUnits::pct);
		}
		else {
			BallIntake.stop(brakeType::brake);
		}
        //The past 9 lines of code allow for the X and A buttons to control the up and down motion
        //of our ball intake.
    }
    vex::task::sleep(20); //Makes the cortex wait 1/50th of a second between running the previous code.
}

int main() {
    pre_auton();
    Competition.drivercontrol(usercontrol); //This tells the cotrex that the function it needs to execute during 
                                            //the driver control period of the conmpetition
    Competition.autonomous(PSkills); //These lines tell the cortex which function to run during the autonomous 
    //Competition.autonomous(rbautonomous); //period. There are 2 so that we can easily switch between the two.
    
    /*
    int Menu = 1;
    
    Brain.Screen.setPenColor(vex::color::black);
    Brain.Screen.setFillColor(vex::color::red);
    Brain.Screen.drawRectangle(0, 0, 100, 100);
    Brain.Screen.drawRectangle(0, 140, 100, 100);
    
    Brain.Screen.setPenColor(vex::color::black);
    Brain.Screen.setFillColor(vex::color::blue);
    Brain.Screen.drawRectangle(380, 0, 100, 100);
    Brain.Screen.drawRectangle(380, 140, 100, 100);
    
    
 	while (1){
        int x = Brain.Screen.xPosition();
        int y = Brain.Screen.xPosition();
        
        if (Menu == 1) {
            if(Brain.Screen.pressing() && x >= 0 && x <= 100 && y >= 0 && y <= 100) {
                Brain.Screen.clearScreen();
                //Competition.autonomous( auton1 );
                //Menu == 2;
                
                Brain.Screen.setPenColor(vex::color::black);
                Brain.Screen.setFillColor(vex::color::white);
                Brain.Screen.drawRectangle(0, 0, 100, 100);
            }
            else if(Brain.Screen.pressing() && x >= 0 && x <= 100 && y >= 140 && y <= 240) {
                Brain.Screen.clearScreen();
                //Competition.autonomous( auton2 );
                //Menu == 2;
                
                Brain.Screen.setPenColor(vex::color::black);
                Brain.Screen.setFillColor(vex::color::white);
                Brain.Screen.drawRectangle(0, 140, 100, 100);
            }
            
            else if(Brain.Screen.pressing() && x >= 380 && x <= 480 && y >= 0 && y <= 100) {
                Brain.Screen.clearScreen();
                //Competition.autonomous( auton2 );
                //Menu == 2;
            }
            else if(Brain.Screen.pressing() && x >= 380 && x <= 480 && y >= 140 && y <= 240) {
                Brain.Screen.clearScreen();
                //Competition.autonomous( auton2 );
                //Menu == 2;
            }
            else {}
            
        }
        
        vex::task::sleep(100);
 	}
    */
 }
